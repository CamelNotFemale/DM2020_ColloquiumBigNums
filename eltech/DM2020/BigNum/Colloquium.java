package eltech.DM2020.BigNum;

import java.util.*;
import java.math.*;

/**
* Класс, который содержит интерфейс
* @version 0.01
* @author Семенов Алексей, Сычев Александр
* Главный SQA - Семенов Алексей
*/
public class Colloquium
{
	private static HashMap<String, Object> nums = new HashMap<String, Object>();
	private static Scanner in = new Scanner(System.in);
	private static final String SintaxisProblem = "Неверный синтаксис комманды";
	private static final String NotBigNumInDictProblem = " нет в списке чисел (попробуйте использовать new)";
	
	public static void start()
	{
		Object buffObj;
		boolean EXIT = false;
		int i;
		String[] cm;
		String buffS;
		while(!EXIT)
		{
			System.out.print("Input: ");
			cm = in.nextLine().split(" ");
			if(!checkLegal(cm))
				continue;
			if(cm.length == 1)
			{
				buffS = cm[0];
				cm = new String[2];
				cm[1] = buffS;
			}
			switch(cm[1].toLowerCase())
			{
				case "exit":
				{
					EXIT = true;
					break;
				}
				case "new": 
				{
					switch(cm[2])
					{
						case "BigN":
						{
							nums.put(cm[0], null);
							break;
						}
						default:
						{
							System.out.println("Нет такого вида: " + cm[2]);
							break;
						}
					}
					break;
				}
				case "input":
				{
					System.out.println("Введите число: ");
					buffS = in.nextLine();
					nums.put(cm[0], new BigN(buffS)) ;
					break;
				}
				case "output":
				{
					System.out.println(nums.get(cm[0]));
					break;
				}
				default:
				{
					System.out.println("Нет такой комманды: " + cm[1]);
					break;
				}
			}
		}
	}
	
	private static boolean checkLegal(String[] cm)
	{
		boolean result = true;
		if(cm[0].equals("?") || cm[0].toLowerCase().equals("help"))
		{
			System.out.println(help());
			return false;
		}
		if(cm.length < 2 )
		{
			if(!cm[0].toLowerCase().equals("exit") && !cm[0].toLowerCase().equals("list"))
			{
				System.out.println(SintaxisProblem);
				return false;
			}
			else
				return true;
		}
		if( cm[1].toLowerCase().equals("new") )
		{
			if(nums.containsKey(cm[0]))
			{
				System.out.println(cm[0] + " уже содержится в списке чисел");
				return false;
			}
			if(cm.length != 3)
			{
				System.out.println(SintaxisProblem);
				return false;
			}
			return true;
		}
		if(!nums.containsKey(cm[0]))
		{
			System.out.println(cm[0] + NotBigNumInDictProblem);
			result = false;
		}
		if(cm.length > 2)
		{
			if( !nums.containsKey(cm[2]) )
			{
				System.out.println(cm[2] + NotBigNumInDictProblem);
				result = false;
			}
			if(cm.length > 4)
				if( !nums.containsKey(cm[4]) )
				{
					System.out.println(cm[4] + NotBigNumInDictProblem);
					result = false;
				}
		}
		
		return result;
	}
	
	private static String help()
	{
		String S = "Помощь?";
		return S;
	}
}

/*


2135634297865987216458932168321542321356342978659872164589321683215423213563429786598721645893216832154232135634297865987216458932168321542321356342978659872164589321683215423943261948561392463217846297316482316498335129463240062973164823164983351294632400124231576423768468923169432619485613924632178462973164823164983351294632400124231576423768468923169432619485613924632178462973164823164983351294632400124231576423768468923169432619485613962973164823164983351294632400124231576423768468923169432619485613924632178462973164823164983351294632400124231576423768468923169432619485613924632178462973164823164983351294632400124231576423768468923169432619485613924632178462973164821645893216832154232135634297865987216458932168321542321356342978659872164589321683215423213563429786598721645893216832154239432619485613924632178462973164823164983351294632400629731648231649833512946324001242315764846297316482316498335129463240012423157642376846892316943261948561392463217846297316482316498335129463240012423157642376846892316943261948561396297316482316498335129463240012423157642376846892316943261948561392463217846297316482316498335129463240012423157642376846892316943261948561392463217846297316482316498335129463240012423157642376846892316943261948561392463217846297316482164589321683215423213563429786598721645893216832154232135634297865987216458932168321542321356342978659872164589321683215423943261948561321356342978659872164589321683215423213563429786598721645893216832154232135634297865987216458932168321542321356342978659872164589321683215423213563429786598721645893216832154239432619485613924632178462973164823164983351294632400629731648231649833512946324001242315764237684689231694326194856139246321784629731648231649833512946324001242315764237684689231694326194856139246321784629731648231649833512946324001242315764237684689231694326194856139629731648231649833512946324001242315764237684689231694326194856139246321784629731648231649833512946324001242315764237684689231694326194856139246321784629731648231649833512946324001242
*/